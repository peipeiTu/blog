{"componentChunkName":"component---src-templates-blog-post-js","path":"/notebook/database/transaction_and_lock/","result":{"data":{"markdownRemark":{"html":"<h5>事务(Transaction)：</h5>\n<ul>\n<li>事务是数据库执行过程中的一个逻辑单位，由一系列有限的数据库操作序列构成。被事务裹起来的这些操作会有共同的执行结果，要么全部成功，要么失败并全部回滚。可以解决操作原子性的问题。</li>\n</ul>\n<p>如银行转账，A转账100给B，即需要：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">A余额 -= 100\nB余额 += 100</code></pre></div>\n<p>两条语句虽然独立，但最终结果必须是要么都执行，要么都不执行。</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">// SQL代码</span>\n<span class=\"token keyword\">start</span> <span class=\"token keyword\">transaction</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 操作</span>\n<span class=\"token keyword\">commit</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">Sequelize</code>提供<code class=\"language-text\">Transaction</code>类，通过<code class=\"language-text\">Sequelize.transaction</code>创建事务，并在每一次数据库操作设置当前操作属于哪个事务：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">await</span> sequelize<span class=\"token punctuation\">.</span><span class=\"token function\">transaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">transaction</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Accounts<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      where<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        name<span class=\"token punctuation\">:</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      transaction\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">await</span> instance<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      balances<span class=\"token punctuation\">:</span> instance<span class=\"token punctuation\">.</span>balances <span class=\"token operator\">+</span> number<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      transaction\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<hr>\n<h5>并发</h5>\n<p>事务只解决了操作原子性的问题，并发则需要通过加锁来避免。</p>\n<h6>锁：</h6>\n<ul>\n<li><code class=\"language-text\">悲观锁</code>：为了避免冲突，直接给记录加上锁，再事务释放之前，其他要对该记录执行操作的事务都必须等待。MySql、Postgres都实现了悲观锁。缺点是，再读操作频繁的场景下，会影响吞吐量。</li>\n<li><code class=\"language-text\">乐观锁</code>：不对读进行限制，仅在写入更新的时候做判断。通常会增加version字段，每次更新的时候version+1，提交更新的时候先判断version，如果已失效则重试。在写操作频繁的场景下会不断发生重试，也会影响吞吐量。</li>\n<li><code class=\"language-text\">排他锁</code>：悲观锁的一种，查询的时候加锁。同一资源同一时间只能有一个排他锁，其他事务读写都需要等待。</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">// SQL代码</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> accounts <span class=\"token keyword\">WHERE</span> name<span class=\"token operator\">=</span><span class=\"token string\">'name'</span> <span class=\"token keyword\">FOR</span> <span class=\"token keyword\">UPDATE</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Sequelize 写法</span>\n<span class=\"token keyword\">await</span> Accounts<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  where<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'name'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  lock<span class=\"token punctuation\">:</span> Sequelize<span class=\"token punctuation\">.</span>Transaction<span class=\"token punctuation\">.</span><span class=\"token constant\">LOCK</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UPDATE</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">共享锁</code>：允许同一资源同时存在多个共享锁，当需要执行修改、删除等操作时，必须等其他所有共享锁都释放后才能执行。</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> accounts <span class=\"token keyword\">WHERE</span> name<span class=\"token operator\">=</span><span class=\"token string\">'name'</span> <span class=\"token keyword\">FOR</span> <span class=\"token keyword\">SHARE</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">await</span> Accounts<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  where<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">:</span><span class=\"token string\">'name'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  lock<span class=\"token punctuation\">:</span> Sequelize<span class=\"token punctuation\">.</span>Transaction<span class=\"token punctuation\">.</span><span class=\"token constant\">LOCK</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SHARE</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4>事务隔离级</h4>\n<table class=\"table table-bordered table-striped table-dark\">\n  <thead>\n    <tr>\n      <th scope=\"col\">级别</th>\n      <th scope=\"col\">脏读</th>\n      <th scope=\"col\">不可重复读</th>\n      <th scope=\"col\">幻读</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th scope=\"row\">READ_UNCOMMITTED 读未提交</th>\n      <td></td>\n      <td></td>\n      <td></td>\n    </tr>\n    <tr>\n      <th scope=\"row\">READ_COMMITTED 读已提交</th>\n      <td>×</td>\n      <td></td>\n      <td></td>\n    </tr>\n    <tr>\n      <th scope=\"row\">REPEATABLE_READ 可重复读</th>\n      <td>×</td>\n      <td>×</td>\n      <td></td>\n    </tr>\n        <tr>\n      <th scope=\"row\">SERIALIZABLE 可串行化</th>\n      <td>×</td>\n      <td>×</td>\n      <td>×</td>\n    </tr>\n  </tbody>\n</table>\n* ×表示在这个级别里，某类问题不会出现。\n<p>相关文章</p>\n<ul>\n<li><a href=\"https://juejin.im/post/5c98e31f51882574c6520dc3\">学点后端知识之 Sequelize 中创建事务和🔐</a></li>\n</ul>","frontmatter":{"title":"事务和锁（包含Sequelize下的操作）","date":"2019-12-09T06:09:03.000Z","description":"事务和锁","type":"数据库"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/notebook/database/transaction_and_lock/","previous":{"fields":{"slug":"/notebook/gtm/ga-user-id-replace/"},"frontmatter":{"title":"GTM 替换GA中的用户ID"}},"next":null}}}