{"componentChunkName":"component---src-templates-blog-post-js","path":"/notebook/nodejs/process_and_thread/","result":{"data":{"markdownRemark":{"html":"<h3 id=\"进程\" style=\"position:relative;\"><a href=\"#%E8%BF%9B%E7%A8%8B\" aria-label=\"进程 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>进程</h3>\n<ul>\n<li>进程<code class=\"language-text\">Process</code>是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础，进程是线程的容器。</li>\n<li>进程是资源分配的最小单位，每启动一个服务、运行一个实例，都是开启一个进程。</li>\n<li>多进程就是进程的复制（fork），fork出来的每个进程都拥有自己的独立空间地址、数据栈，不同进程之间不能直接访问对方的数据或变量，但可以建立IPC通信进行数据传递。</li>\n<li>在<code class=\"language-text\">Nodejs</code>里面，<code class=\"language-text\">node app.js</code>就是启动了一个进程。</li>\n</ul>\n<hr>\n<h3 id=\"线程\" style=\"position:relative;\"><a href=\"#%E7%BA%BF%E7%A8%8B\" aria-label=\"线程 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>线程</h3>\n<ul>\n<li>线程是操作系统能够进行运算调度的最小单位。线程和进程是多对一的关系，一个线程对应单个进程，而一个进程可以拥有多个线程。</li>\n</ul>\n<h4 id=\"单线程\" style=\"position:relative;\"><a href=\"#%E5%8D%95%E7%BA%BF%E7%A8%8B\" aria-label=\"单线程 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>单线程</h4>\n<ul>\n<li>单线程就是一个进程只开一个线程。</li>\n<li><code class=\"language-text\">javascript</code>就是单线程，所有操作会排成队列，按顺序执行。所以但线程语言编码时，容易因为操作耗时过多而造成阻塞。所以在<code class=\"language-text\">javascript</code>编码时，会更多的使用异步操作的特性。</li>\n</ul>","tableOfContents":"<ul>\n<li><a href=\"/notebook/nodejs/process_and_thread/#%E8%BF%9B%E7%A8%8B\">进程</a></li>\n<li>\n<p><a href=\"/notebook/nodejs/process_and_thread/#%E7%BA%BF%E7%A8%8B\">线程</a></p>\n<ul>\n<li><a href=\"/notebook/nodejs/process_and_thread/#%E5%8D%95%E7%BA%BF%E7%A8%8B\">单线程</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"理解Node.js中的进程与线程","date":"2020-06-23 03:15","description":"对Node.js中的进程与线程，做一个比较明确的梳理","type":"NodeJs"}}},"pageContext":{"slug":"/notebook/nodejs/process_and_thread/","previous":{"fields":{"slug":"/notebook/program/semver_2.0.0/"},"frontmatter":{"title":"语义化版本 2.0.0"}},"next":{"fields":{"slug":"/notebook/front_end/angular/"},"frontmatter":{"title":"Angular学习 - 基于angular10"}}}}}