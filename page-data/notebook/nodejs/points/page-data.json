{"componentChunkName":"component---src-templates-blog-post-js","path":"/notebook/nodejs/points/","result":{"data":{"markdownRemark":{"html":"<h3 id=\"buffer---缓冲器\"><a href=\"#buffer---%E7%BC%93%E5%86%B2%E5%99%A8\" aria-label=\"buffer   缓冲器 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Buffer - 缓冲器</h3>\n<br>\n<h5 id=\"1-buffer和-new-buffer-已废弃\"><a href=\"#1-buffer%E5%92%8C-new-buffer-%E5%B7%B2%E5%BA%9F%E5%BC%83\" aria-label=\"1 buffer和 new buffer 已废弃 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. <code class=\"language-text\">Buffer()和 new Buffer()</code> 已废弃</h5>\n<p><code class=\"language-text\">Buffer()和 new Buffer()</code> 构造函数是不安全的，应使用其他的替代，替代规则如下：</p>\n<ul>\n<li>对于<code class=\"language-text\">new Buffer(number)</code>，使用<code class=\"language-text\">Buffer.alloc(number)</code>替换</li>\n<li>对于<code class=\"language-text\">new Buffer(string) / new Buffer(string,encoding)</code>，使用对应的<code class=\"language-text\">Buffer.from(string) / Buffer.from(string,encoding)</code>替换</li>\n<li>对于其他情况（一般极为罕见）中使用了<code class=\"language-text\">new Buffer(...arguments)</code>的，使用<code class=\"language-text\">Buffer.from(...arguments)</code>替换</li>\n</ul>\n<hr>\n<h3 id=\"child_process---子进程\"><a href=\"#child_process---%E5%AD%90%E8%BF%9B%E7%A8%8B\" aria-label=\"child_process   子进程 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>child_process - 子进程</h3>\n<br>\n<h5 id=\"1-创建进程\"><a href=\"#1-%E5%88%9B%E5%BB%BA%E8%BF%9B%E7%A8%8B\" aria-label=\"1 创建进程 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 创建进程</h5>\n<p>子进程模块可以创建异步或同步的进程，来执行额外的命令，如<code class=\"language-text\">ls</code>等在控制台执行的命令。</p>\n<hr>\n<h3 id=\"crypto---加密\"><a href=\"#crypto---%E5%8A%A0%E5%AF%86\" aria-label=\"crypto   加密 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>crypto - 加密</h3>\n<p><code class=\"language-text\">crypto</code>模块提供了加密功能，包括对OpenSSL的哈希、HMAC、加密、解密、签名、以及验证功能的一整套封装。</p>\n<h5 id=\"1-hash类\"><a href=\"#1-hash%E7%B1%BB\" aria-label=\"1 hash类 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. <code class=\"language-text\">Hash</code>类</h5>\n<p>用于创建数据的哈希摘要。<code class=\"language-text\">crypto.createHash()</code>用于创建<code class=\"language-text\">Hash</code>实例，不能用<code class=\"language-text\">new</code>直接创建。</p>\n<p>摘要<code class=\"language-text\">(digest)</code>算法是输入长度不固定的消息，生成固定长度的输出。摘要运算不可逆，相同输入产生相同输出，且输出的长度固定。在我目前的编程生涯中，主要用摘要运算来生成作为标记ID的哈希，如矿工ID。</p>\n<p>常见摘要算法及其输出位数：</p>\n<ul>\n<li><code class=\"language-text\">MD5</code>: 128</li>\n<li><code class=\"language-text\">SHA-1</code>: 160</li>\n<li><code class=\"language-text\">SHA256</code>: 256</li>\n<li><code class=\"language-text\">SHA512</code>: 512</li>\n</ul>\n<p>创建后可以通过两种方式之一使用：</p>\n<ul>\n<li>作为可读写的流，其中写入数据以在可读侧生成计算后的哈希摘要。</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> crypto <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'crypto'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> hash <span class=\"token operator\">=</span> crypto<span class=\"token punctuation\">.</span><span class=\"token function\">createHash</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sha256'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nhash<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'readable'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 哈希流只会生成一个元素。</span>\n  <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> hash<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hex'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 打印:  164345eba9bccbafb94b27b8299d49cc2d80627fc9995b03230965e6d8bcbf56</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nhash<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'要创建哈希摘要的数据'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nhash<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>使用<code class=\"language-text\">hash.update()</code>和<code class=\"language-text\">hash.digest()</code>方法生成计算后的哈希。</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> crypto <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'crypto'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> hash <span class=\"token operator\">=</span> crypto<span class=\"token punctuation\">.</span><span class=\"token function\">createHash</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sha256'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nhash<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token string\">'要创建哈希摘要的数据'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">.</span><span class=\"token function\">digest</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hex'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 打印: 164345eba9bccbafb94b27b8299d49cc2d80627fc9995b03230965e6d8bcbf56</span></code></pre></div>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/blog/notebook/nodejs/points/#buffer---%E7%BC%93%E5%86%B2%E5%99%A8\">Buffer - 缓冲器</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/blog/notebook/nodejs/points/#1-buffer%E5%92%8C-new-buffer-%E5%B7%B2%E5%BA%9F%E5%BC%83\">1. &#x3C;code class=\"language-text\">Buffer()和 new Buffer()&#x3C;/code> 已废弃</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/blog/notebook/nodejs/points/#child_process---%E5%AD%90%E8%BF%9B%E7%A8%8B\">child_process - 子进程</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/blog/notebook/nodejs/points/#1-%E5%88%9B%E5%BB%BA%E8%BF%9B%E7%A8%8B\">1. 创建进程</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/blog/notebook/nodejs/points/#crypto---%E5%8A%A0%E5%AF%86\">crypto - 加密</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/blog/notebook/nodejs/points/#1-hash%E7%B1%BB\">1. &#x3C;code class=\"language-text\">Hash&#x3C;/code>类</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"NodeJs 知识点","date":"2019-12-09 08:35","description":"NodeJs 常用的模块以及模块中常用的方法和类等","type":"NodeJs"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/notebook/nodejs/points/","previous":{"fields":{"slug":"/notebook/database/mysql_use/"},"frontmatter":{"title":"MySQL配置及使用"}},"next":{"fields":{"slug":"/notebook/linux/commands/"},"frontmatter":{"title":"Ubuntu常用命令"}}}}}