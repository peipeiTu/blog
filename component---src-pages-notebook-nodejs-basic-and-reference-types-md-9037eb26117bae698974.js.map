{"version":3,"file":"component---src-pages-notebook-nodejs-basic-and-reference-types-md-9037eb26117bae698974.js","mappings":"iQAOaA,EAAe,CAC1B,MAAS,cACT,KAAQ,2BACR,YAAe,2BACf,KAAQ,UAEJC,EAAc,CAClBD,aAAAA,GAGa,SAASE,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAC5E,eACE,GAAM,YACN,MAAS,CACP,SAAY,cAEb,cAAGC,WAAW,KACb,KAAQ,qFACR,aAAc,sBACd,UAAa,kBACZ,gBAAKA,WAAW,IACf,cAAe,OACf,UAAa,QACb,OAAU,KACV,QAAW,MACX,QAAW,YACX,MAAS,OACR,iBAAMA,WAAW,MAChB,SAAY,UACZ,EAAK,oVAlBb,cAoBA,oBACE,eAAIA,WAAW,OACb,cAAGA,WAAW,OAAK,mBAAQA,WAAW,KAAnB,UACnB,eAAIA,WAAW,OACb,eAAIA,WAAW,MAAf,+FACA,eAAIA,WAAW,MAAf,wBAEF,gBAAKA,WAAW,KACd,UAAa,mBACb,gBAAiB,eAChB,gBAAKA,WAAW,MACf,UAAa,wBACZ,iBAAMA,WAAW,MAChB,UAAa,wBACZ,iBAAMA,WAAW,OAChB,UAAa,iBADd,OAFF,OAIyB,iBAAMA,WAAW,OACvC,UAAa,kBADS,KAJzB,KAMqB,iBAAMA,WAAW,OACnC,UAAa,gBADK,MAEL,iBAAMA,WAAW,OAC9B,UAAa,qBADA,KARhB,QAWT,iBAAMA,WAAW,OACL,UAAa,kBADzB,KAXS,KAaqB,iBAAMA,WAAW,OACnC,UAAa,gBADK,MAEL,iBAAMA,WAAW,OAC9B,UAAa,qBADA,SAGrB,cAAGA,WAAW,MAAd,2BAA8C,iBAAMA,WAAW,IAC3D,UAAa,iBAD6B,MAA9C,MAGA,eAAIA,WAAW,OACb,eAAIA,WAAW,MAAf,gCAEF,gBAAKA,WAAW,KACd,UAAa,mBACb,gBAAiB,eAChB,gBAAKA,WAAW,MACf,UAAa,wBACZ,iBAAMA,WAAW,MAChB,UAAa,wBACZ,iBAAMA,WAAW,OAChB,UAAa,iBADd,OAFF,OAIyB,iBAAMA,WAAW,OACvC,UAAa,kBADS,KAJzB,KAMqB,iBAAMA,WAAW,OACnC,UAAa,gBADK,UAED,iBAAMA,WAAW,OAClC,UAAa,qBADI,KARpB,QAWT,iBAAMA,WAAW,OACL,UAAa,kBADzB,KAXS,MAasB,iBAAMA,WAAW,OACpC,UAAa,qBADM,SAG3B,cAAGA,WAAW,MAAd,4CAEF,eAAIA,WAAW,OACb,cAAGA,WAAW,OAAK,mBAAQA,WAAW,KAAnB,UACnB,eAAIA,WAAW,OACb,eAAIA,WAAW,MAAf,yCAA6D,iBAAMA,WAAW,KAC1E,UAAa,iBAD4C,UAA7D,aAUVJ,EAAWK,gBAAiB,G,qBClHb,SAASC,EAA8BC,EAAQC,GAC5D,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IAEIE,EAAKC,EAFLC,EAAS,GACTC,EAAaC,OAAOC,KAAKP,GAG7B,IAAKG,EAAI,EAAGA,EAAIE,EAAWG,OAAQL,IACjCD,EAAMG,EAAWF,GACbF,EAASQ,QAAQP,IAAQ,IAC7BE,EAAOF,GAAOF,EAAOE,IAGvB,OAAOE,E","sources":["webpack://gatsby-starter-blog/./src/pages/notebook/nodejs/basic_and_reference_types.md","webpack://gatsby-starter-blog/./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"JS基本类型和引用类型\",\n  \"date\": \"2020-10-28T09:44:00.000Z\",\n  \"description\": \"JS基本类型和引用类型的区别及使用上的一些注意点\",\n  \"type\": \"NodeJs\"\n};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h4 {...{\n      \"id\": \"基本类型和引用类型\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h4\" {...{\n        \"href\": \"#%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B\",\n        \"aria-label\": \"基本类型和引用类型 permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`基本类型和引用类型`}</h4>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`基本类型`}</strong></p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`即值类型，是一种既非对象也无方法的数据。JS目前共有7种基本类型：string, number, bigint, boolean, null, undefined, symbol。`}</li>\n          <li parentName=\"ul\">{`所有基本类型的值都是不可改变的，如：`}</li>\n        </ul>\n        <div parentName=\"li\" {...{\n          \"className\": \"gatsby-highlight\",\n          \"data-language\": \"javascript\"\n        }}><pre parentName=\"div\" {...{\n            \"className\": \"language-javascript\"\n          }}><code parentName=\"pre\" {...{\n              \"className\": \"language-javascript\"\n            }}><span parentName=\"code\" {...{\n                \"className\": \"token keyword\"\n              }}>{`var`}</span>{` a `}<span parentName=\"code\" {...{\n                \"className\": \"token operator\"\n              }}>{`=`}</span>{` `}<span parentName=\"code\" {...{\n                \"className\": \"token number\"\n              }}>{`5`}</span><span parentName=\"code\" {...{\n                \"className\": \"token punctuation\"\n              }}>{`;`}</span>{`\na `}<span parentName=\"code\" {...{\n                \"className\": \"token operator\"\n              }}>{`=`}</span>{` `}<span parentName=\"code\" {...{\n                \"className\": \"token number\"\n              }}>{`6`}</span><span parentName=\"code\" {...{\n                \"className\": \"token punctuation\"\n              }}>{`;`}</span></code></pre></div>\n        <p parentName=\"li\">{`这里a的值改变了，不过MDN对这段代码的定义为`}<code parentName=\"p\" {...{\n            \"className\": \"language-text\"\n          }}>{`替换`}</code>{`。`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`对于基本类型，JS采用的是传值调用，即传递副本，如：`}</li>\n        </ul>\n        <div parentName=\"li\" {...{\n          \"className\": \"gatsby-highlight\",\n          \"data-language\": \"javascript\"\n        }}><pre parentName=\"div\" {...{\n            \"className\": \"language-javascript\"\n          }}><code parentName=\"pre\" {...{\n              \"className\": \"language-javascript\"\n            }}><span parentName=\"code\" {...{\n                \"className\": \"token keyword\"\n              }}>{`var`}</span>{` a `}<span parentName=\"code\" {...{\n                \"className\": \"token operator\"\n              }}>{`=`}</span>{` `}<span parentName=\"code\" {...{\n                \"className\": \"token string\"\n              }}>{`'abc'`}</span><span parentName=\"code\" {...{\n                \"className\": \"token punctuation\"\n              }}>{`;`}</span>{`\nb `}<span parentName=\"code\" {...{\n                \"className\": \"token operator\"\n              }}>{`=`}</span>{` a`}<span parentName=\"code\" {...{\n                \"className\": \"token punctuation\"\n              }}>{`;`}</span></code></pre></div>\n        <p parentName=\"li\">{`上面代码中，b得到的是一个新副本，所以无论a和b如何改变，都不会影响到对方。`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`引用类型`}</strong></p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`所有对象都是引用类型。在JS中，数组、函数、Map、Set等都是对象，可以`}<code parentName=\"li\" {...{\n              \"className\": \"language-text\"\n            }}>{`typeof`}</code>{`打印看看。`}</li>\n        </ul>\n      </li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"names":["_frontmatter","layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent","_objectWithoutPropertiesLoose","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf"],"sourceRoot":""}