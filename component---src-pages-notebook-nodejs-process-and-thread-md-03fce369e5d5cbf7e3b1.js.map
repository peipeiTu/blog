{"version":3,"file":"component---src-pages-notebook-nodejs-process-and-thread-md-03fce369e5d5cbf7e3b1.js","mappings":"iQAOaA,EAAe,CAC1B,MAAS,mBACT,KAAQ,2BACR,YAAe,6BACf,KAAQ,UAEJC,EAAc,CAClBD,aAAAA,GAGa,SAASE,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAC5E,eACE,GAAM,KACN,MAAS,CACP,SAAY,cAEb,cAAGC,WAAW,KACb,KAAQ,sBACR,aAAc,eACd,UAAa,kBACZ,gBAAKA,WAAW,IACf,cAAe,OACf,UAAa,QACb,OAAU,KACV,QAAW,MACX,QAAW,YACX,MAAS,OACR,iBAAMA,WAAW,MAChB,SAAY,UACZ,EAAK,oVAlBb,OAoBA,oBACE,eAAIA,WAAW,MAAf,MAA0B,iBAAMA,WAAW,KACvC,UAAa,iBADS,WAA1B,mEAGA,eAAIA,WAAW,MAAf,0CACA,eAAIA,WAAW,MAAf,wFACA,eAAIA,WAAW,MAAf,KAAyB,iBAAMA,WAAW,KACtC,UAAa,iBADQ,UAAzB,OAE6B,iBAAMA,WAAW,KAC1C,UAAa,iBADY,eAF7B,gBAMF,qBACA,eACE,GAAM,KACN,MAAS,CACP,SAAY,cAEb,cAAGA,WAAW,KACb,KAAQ,sBACR,aAAc,eACd,UAAa,kBACZ,gBAAKA,WAAW,IACf,cAAe,OACf,UAAa,QACb,OAAU,KACV,QAAW,MACX,QAAW,YACX,MAAS,OACR,iBAAMA,WAAW,MAChB,SAAY,UACZ,EAAK,oVAlBb,OAoBA,oBACE,eAAIA,WAAW,MAAf,iEAEF,eACE,GAAM,MACN,MAAS,CACP,SAAY,cAEb,cAAGA,WAAW,KACb,KAAQ,+BACR,aAAc,gBACd,UAAa,kBACZ,gBAAKA,WAAW,IACf,cAAe,OACf,UAAa,QACb,OAAU,KACV,QAAW,MACX,QAAW,YACX,MAAS,OACR,iBAAMA,WAAW,MAChB,SAAY,UACZ,EAAK,oVAlBb,QAoBA,oBACE,eAAIA,WAAW,MAAf,qBACA,eAAIA,WAAW,OAAK,iBAAMA,WAAW,KACjC,UAAa,iBADG,cAApB,wDAEkF,iBAAMA,WAAW,KAC/F,UAAa,iBADiE,cAFlF,wBAUNJ,EAAWK,gBAAiB,G,qBC9Gb,SAASC,EAA8BC,EAAQC,GAC5D,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IAEIE,EAAKC,EAFLC,EAAS,GACTC,EAAaC,OAAOC,KAAKP,GAG7B,IAAKG,EAAI,EAAGA,EAAIE,EAAWG,OAAQL,IACjCD,EAAMG,EAAWF,GACbF,EAASQ,QAAQP,IAAQ,IAC7BE,EAAOF,GAAOF,EAAOE,IAGvB,OAAOE,E","sources":["webpack://gatsby-starter-blog/./src/pages/notebook/nodejs/process_and_thread.md","webpack://gatsby-starter-blog/./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"理解Node.js中的进程与线程\",\n  \"date\": \"2020-06-23T03:15:03.284Z\",\n  \"description\": \"对Node.js中的进程与线程，做一个比较明确的梳理\",\n  \"type\": \"NodeJs\"\n};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h3 {...{\n      \"id\": \"进程\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h3\" {...{\n        \"href\": \"#%E8%BF%9B%E7%A8%8B\",\n        \"aria-label\": \"进程 permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`进程`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`进程`}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`Process`}</code>{`是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础，进程是线程的容器。`}</li>\n      <li parentName=\"ul\">{`进程是资源分配的最小单位，每启动一个服务、运行一个实例，都是开启一个进程。`}</li>\n      <li parentName=\"ul\">{`多进程就是进程的复制（fork），fork出来的每个进程都拥有自己的独立空间地址、数据栈，不同进程之间不能直接访问对方的数据或变量，但可以建立IPC通信进行数据传递。`}</li>\n      <li parentName=\"ul\">{`在`}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`Nodejs`}</code>{`里面，`}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`node app.js`}</code>{`就是启动了一个进程。`}</li>\n    </ul>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"线程\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h3\" {...{\n        \"href\": \"#%E7%BA%BF%E7%A8%8B\",\n        \"aria-label\": \"线程 permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`线程`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`线程是操作系统能够进行运算调度的最小单位。线程和进程是多对一的关系，一个线程对应单个进程，而一个进程可以拥有多个线程。`}</li>\n    </ul>\n    <h4 {...{\n      \"id\": \"单线程\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h4\" {...{\n        \"href\": \"#%E5%8D%95%E7%BA%BF%E7%A8%8B\",\n        \"aria-label\": \"单线程 permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`单线程`}</h4>\n    <ul>\n      <li parentName=\"ul\">{`单线程就是一个进程只开一个线程。`}</li>\n      <li parentName=\"ul\"><code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`javascript`}</code>{`就是单线程，所有操作会排成队列，按顺序执行。所以但线程语言编码时，容易因为操作耗时过多而造成阻塞。所以在`}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`javascript`}</code>{`编码时，会更多的使用异步操作的特性。`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"names":["_frontmatter","layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent","_objectWithoutPropertiesLoose","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf"],"sourceRoot":""}